DataViajes %<>%
select(ViajeID,
medio_predominante1,
zat_origen1, zat_destino1,
diferencia_minutos1,
ponderador_calibrado) %>%
#ponderador_calibrado_viajes1) %>%
mutate(zat_origen1 = as.numeric(zat_origen1),
zat_destino1 = as.numeric(zat_destino1),
ponderador_calibrado = as.numeric(ponderador_calibrado))
sum(Data$ponderador_calibrado, na.rm = TRUE)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as_tibble(Data)
DataViajes <- Data %>%
filter(medio_predominante1 %in% c("AUTO", "TAXI", "Transmilenio", "TPC-SITP", "ALIMENTADOR")) %>%
filter(dia_habil1 == "S")
DataViajes <- DataViajes %>% mutate(ViajeID = seq(1:dim(DataViajes)[1]))
names(DataViajes)
head(DataViajes$ponderador_calibrado)
head(Cosa)
DataViajes <- Data %>%
filter(medio_predominante1 %in% c("AUTO", "TAXI", "Transmilenio", "TPC-SITP", "ALIMENTADOR")) %>%
filter(dia_habil1 == "S")
DataViajes <- DataViajes %>% mutate(ViajeID = seq(1:dim(DataViajes)[1]))
Cosa <- DataViajes$ponderador_calibrado
head(Cosa)
head(DataViajes$ponderador_calibrado)
Cosa2 <- as.numeric(Cosa)
head(Cosa)
head(Cosa)
head(Cosa2)
sum(Cosa2)
sum(Cosa2, na.rm = T)
DataViajes %<>%
select(ViajeID,
medio_predominante1,
zat_origen1, zat_destino1,
diferencia_minutos1,
ponderador_calibrado) %>%
#ponderador_calibrado_viajes1) %>%
mutate(zat_origen1 = as.numeric(zat_origen1),
zat_destino1 = as.numeric(zat_destino1),
ponderador_calibrado = as.numeric(ponderador_calibrado))
sum(Data$ponderador_calibrado, na.rm = TRUE)
View(DataViajes)
as.numeric(" 1,124.1212")
View(Cosa)
Cosa[852]
as.numeric(Cosa[852])
sum(Data$ponderador_calibrado, na.rm = TRUE)
sum(DataViajes$ponderador_calibrado, na.rm = TRUE)
?substr
?gsub
gsub(",", "--", "a,b,c")
gsub(",", "", "a,b,c")
DataViajes <- Data %>%
filter(medio_predominante1 %in% c("AUTO", "TAXI", "Transmilenio", "TPC-SITP", "ALIMENTADOR")) %>%
filter(dia_habil1 == "S")
DataViajes <- DataViajes %>% mutate(ViajeID = seq(1:dim(DataViajes)[1]))
DataViajes$ponderador_calibrado <- gsub(",",
"",
DataViajes$ponderador_calibrado)
DataViajes %<>%
select(ViajeID,
medio_predominante1,
zat_origen1, zat_destino1,
diferencia_minutos1,
ponderador_calibrado) %>%
#ponderador_calibrado_viajes1) %>%
mutate(zat_origen1 = as.numeric(zat_origen1),
zat_destino1 = as.numeric(zat_destino1),
ponderador_calibrado = as.numeric(ponderador_calibrado))
sum(DataViajes$ponderador_calibrado, na.rm = TRUE)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as_tibble(Data)
names(Data)
Data$ponderador_calibrado <- gsub(",", "",
Data$ponderador_calibrado)
Data$ponderador_calibrado <- as.numeric(Data$ponderador_calibrado)
sum(Data$ponderador_calibrado)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as_tibble(Data)
Cosa = Data$ponderador_calibrado
Data$ponderador_calibrado <- gsub(",", "",
Data$ponderador_calibrado)
Data$ponderador_calibrado <- as.numeric(Data$ponderador_calibrado)
Cosa2 = Data$ponderador_calibrado
View(data.frame(Cosa1,Cosa2))
View(data.frame(Cosa,Cosa2))
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as_tibble(Data)
sum(Data$ponderador_calibrado_viajes1)
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado_viajes1, na.rm = TRUE)) %>% arrange(desc(Total))
names(Data)
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(factor_ajuste) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(ponderador_calibrado) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(factor_ajuste_transmilenio1) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(fe_total1) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(factor_ajuste1) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(ponderador_calibrado1) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(ponderador_calibrado_viajes1) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado_viajes1, na.rm = TRUE)) %>% arrange(desc(Total))
names(Data)
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(fe_total, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(factor_ajuste, na.rm = TRUE)) %>% arrange(desc(Total))
sum(Data$factor_ajuste)
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(factor_ajuste, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(factor_ajuste_transmilenio1, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(factor_ajuste1, na.rm = TRUE)) %>% arrange(desc(Total))
names(Data)
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(factor_ajuste1, na.rm = TRUE)) %>% arrange(desc(Total))
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado1, na.rm = TRUE)) %>% arrange(desc(Total))
sum(Data$ponderador_calibrado1)
sum(Data$ponderador_calibrado)
ponderador_calibrado_viajes1
sum(Data$ponderador_calibrado_viajes1)
Data %>% group_by(medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado1, na.rm = TRUE)) %>% arrange(desc(Total))
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as.tibble(Data)
Viajes <- "VIAJES_ANONIMIZADOS_2015.csv" %>% read_delim(delim=";")
Viajes %>% names
Modos_Viajes_FE <- Viajes %>% group_by(ID_MEDIO_PREDOMINANTE) %>%
summarise(Total = sum(PONDERADOR_CALIBRADO_VIAJES, na.rm = TRUE)) %>% arrange(desc(Total))
Modos_Viajes_FE
Data %>% names()
library(shiny)
library(shinydashboard)
# User Interface
ui <-
dashboardPage(
dashboardHeader(title = "Basic Use of JS and CSS"),
dashboardSidebar(),
dashboardBody(
# Javasript Code
singleton(tags$head(HTML("
<script type='text/javascript'>
function demojs() {
var elem = document.getElementById('sampleanimation');
var position = 0;
var id = setInterval(frame, 10);
function frame() {
if (position == 350) {
clearInterval(id);
} else {
position++;
elem.style.top = position + 'px';
elem.style.left = position + 'px';
}
}
}
</script>"))),
# CSS Code
singleton(tags$head(HTML("
<style type='text/css'>
#sampleanimation {
width: 50px;
height: 50px;
position: absolute;
background-color: blue;
}
</style>"))),
# HTML Code
box(tags$body(HTML("<p>
<button onclick='demojs()'>Click Me</button> </p>
<div id ='sampleanimation'>
</div>
")), height = 400)
))
server = function(input, output) { }
runApp(list(ui = ui, server = server), launch.browser =T)
runApp('Dropbox/Arroz_Paisa/App_Visualization')
?glm
Lakeland <- read.table("Lakeland.xls", header = T)
library(readxl)
Lakeland <- read_excel("Documents/Yesica/Lakeland.xls")
View(Lakeland)
library(readxl)
Lakeland <- read_excel("Documents/Yesica/Lakeland.xls")
Lakeland
MyModel <- glm(Return ~ GPA, data = Lakeland, family = binomial)
MyModel
MyMode2l <- glm(Return ~ GPA + Program, data = Lakeland, family = binomial)
MyMode2l
Lakeland$Program = as.factor(Lakeland$Program)
MyModel2 <- glm(Return ~ GPA + Program, data = Lakeland, family = binomial)
MyModel2
MyModel
summary(MyModel)
MyModel <- glm(Return ~ GPA + Program, data = Lakeland, family = binomial)
summary(MyModel)
confint(MyModel)
MyModel$coefficients
names(LakeHuron)
names(Lakeland)
EstudianteAdicional <- data.frame(GPA = 3.7, Program = 0)
EstudianteAdicional$Probabilidad = predict(MyModel, newdata = EstudianteAdicional)
EstudianteAdicional <- data.frame(GPA = 3.7, Program = as.factor(0))
EstudianteAdicional$Probabilidad = predict(MyModel, newdata = EstudianteAdicional)
EstudianteAdicional
?predict
EstudianteAdicional$Probabilidad = predict(MyModel,
newdata = EstudianteAdicional,
type = "link")
EstudianteAdicional
EstudianteAdicional$Probabilidad = predict(MyModel,
newdata = EstudianteAdicional,
type = "response")
EstudianteAdicional
EstudianteAdicional$Probabilidad = predict(MyModel,
newdata = EstudianteAdicional,
type = "terms")
EstudianteAdicional
EstudianteAdicional
EstudianteAdicional$Probabilidad = predict(MyModel,
newdata = EstudianteAdicional,
type = "terms")
EstudianteAdicional
EstudianteAdicional$Probabilidad = predict(MyModel,
newdata = EstudianteAdicional,
type = "response")
EstudianteAdicional
EstudianteAdicional$Return <- exp(EstudianteAdicional$Probabilidad)/(1+exp(EstudianteAdicional$Probabilidad))
EstudianteAdicional
Lakeland
Lakeland2 <- Lakeland[,c(2,3)]
Lakeland2
Lakeland2 <- Lakeland[,c(2,3)]
Lakeland2$Prob <- predic(MyMaodel,
newdata = Lakeland2,
type = "response")
Lakeland2 <- Lakeland[,c(2,3)]
Lakeland2$Prob <- predic(MyModel,
newdata = Lakeland2,
type = "response")
Lakeland2$Prob <- predict(MyModel,
newdata = Lakeland2,
type = "response")
Lakeland2
Lakeland2$Est <- exp(Lakeland$Probabilidad)/(1+exp(Lakeland$Probabilidad))
Lakeland2$Est <- exp(Lakeland$Prob)/(1+exp(Lakeland$Prob))
Lakeland2$Est <- exp(Lakeland2$Prob)/(1+exp(Lakeland2$Prob))
Lakeland2
View(Lakeland2)
View(Lakeland)
library(ggplot2)
ggplot(data = Lakeland2) + geom_line(aes(x = GPA, y = Prob))
Lake
Lakeland
EstudianteNuevo <-  data.frame(GPA = c(2.8,2.8), Program = as.factor(c(1,0))
EstudianteNuevo <-  data.frame(GPA = c(2.8,2.8), Program = as.factor(c(1,0)))
EstudianteNuevo
EstudianteNuevo$Probabilidad = predict(MyModel,
newdata = EstudianteNuevo,
type = "response")
EstudianteNuevo
EstudianteCP <-  data.frame(GPA = c(2.8,2.8), Program = as.factor(c(1,0)))
EstudianteCP
EstudianteCP$Probabilidad = predict(MyModel,
newdata = EstudianteNuevo,
type = "response")
EstudianteCP
Cociente <- EstudianteCP$Probabilidad[1]/EstudianteCP$Probabilidad[2]
exp(coef(My))
exp(coef(MyModel))
Odds <- exp(coef(MyModel))
Odds
Odds[3]
test <- data.frame(a = c(1,N/A,2,NULL), b = c(1,2,3,4))
test <- data.frame(a = c(1,NA,2,NULL), b = c(1,2,3,4))
test <- data.frame(a = c(1,NULL,2,NULL), b = c(1,2,3,4))
test
test <- data.frame(a = c(1,Na,2,Na), b = c(1,2,3,4))
test <- data.frame(a = c(1,NaN,2,NaN), b = c(1,2,3,4))
test
is.na(a)
is.na(test$a)
test[is.na(test)] <- 0
test
test <- data.frame(a = c(1,NaN,2,NaN), b = c(1,2,3,4))
test
test <- test[complete.cases(test)]
complete.cases(test)
test <- test[complete.cases(test),]
test
?merge
library(tidyverse)
?left_join
library(readxl)
Lakeland <- read_excel("Documents/Yesica/Lakeland.xls")
library(readxl)
Lakeland <- read_excel("Lakeland.xls")
library(tidyverse)
mtcars
ggplot(data = mtcars) + geom_line(aes(x = drat, y =wt))
head(mtcars)
head(mtcars)
plot(cars)
head(mtcars)
plot(cars)
plot(cars)
library(here)
install.packages("here")
library(here)
normalize <- function(number) {
return ((number - min(number)) / (max(number) - min(number)))}
normalize(5)
normalize(c(1,2,3,4,5))
normalize(data$V1)
data <- data.frame(V1_norm = c(6,1,10,2), V2_norm = c(10,20,100,40))
normalize(data$V1)
normalize(data$V2)
objectSF <- nc
library(sf)
objectSF <- nc
my_df <- mtcars
my_df
lapply(my_df, is.numeric)
lapply(my_df["gear"], is.numeric)
myfunc   <- function(my_df,colmn) {
if (lapply(my_df[colmn], is.numeric) == TRUE){
print(class(my_df[colmn])) #Checking to see if I'm getting dataframe
print(colmn) #Check to see if I'm getting the right column
#Plotting a scatter plot
ggplot(data=my_df,
aes(x =my_df[colmn], #x-axis being the input colmn value via the function
y=my_df["mpg"] # a column that is already present in the my_df dataframe
)
) +
geom_point(size=2)
}
}
myfunc(my_df=a_df, colmn="gear")
myfunc(my_df=my_df, colmn="gear")
library(tidyverse)
my_df <- mtcars
myfunc   <- function(my_df,colmn) {
if (lapply(my_df[colmn], is.numeric) == TRUE){
print(class(my_df[colmn])) #Checking to see if I'm getting dataframe
print(colmn) #Check to see if I'm getting the right column
#Plotting a scatter plot
ggplot(data=my_df,
aes(x =my_df[colmn], #x-axis being the input colmn value via the function
y=my_df["mpg"] # a column that is already present in the my_df dataframe
)
) +
geom_point(size=2)
}
}
myfunc(my_df=my_df, colmn="gear")
MyData <- mtcars
ggplot(data=my_df,
aes(x =MyData["gear"], #x-axis being the input colmn value via the function
y=MyData["mpg"] # a column that is already present in the my_df dataframe
)
) +
geom_point(size=2)
ggplot(data=MyData,
aes(x =MyData["gear"], #x-axis being the input colmn value via the function
y=MyData["mpg"] # a column that is already present in the my_df dataframe
)
) +
geom_point(size=2)
ggplot(data=MyData,
aes(x =MyData["gear"], y = MyData["mpg"])) +
geom_point(size=2)
ggplot(data=MyData,
aes(x = MyData$gear, y = MyData$mpg)) +
geom_point(size=2)
MyData["gear"]
MyMata["mpg"]
MyData["mpg"]
ggplot(data=MyData,
aes(x = MyData["gear"], y = MyData["mpg"])) +
geom_point(size=2)
ggplot(data=MyData,
aes(x = "gear", y = "mpg")) +
geom_point(size=2)
X = MyData["gear"]
ggplot(data=MyData,
aes(x = x, y = Y)) +
geom_point(size=2)
X = MyData["gear"]
Y = MyData["mpg"]
ggplot(data=MyData,
aes(x = X, y = Y)) +
geom_point(size=2)
DataTemop <- data.frame(X = MyData["gear"], Y = MyData["mpg"])
ggplot(data=MyData,
aes(x = X, y = Y)) +
geom_point(size=2)
DataTemp <- data.frame(X = MyData["gear"], Y = MyData["mpg"])
DataTemp
ggplot(data=DataTemp,
aes(x = X, y = Y)) +
geom_point(size=2)
MyData <- mtcars
DataTemp <- data.frame(X = MyData["gear"], Y = MyData["mpg"])
DataTemp
class(DataTemp)
names(DataTemp)
DataTemp <- data.frame(MyData["gear"], MyData["mpg"])
names(DataTemp) <- c("X", "Y")
DataTemp <- data.frame(MyData["gear"], MyData["mpg"])
names(DataTemp) <- c("X", "Y")
ggplot(data = DataTemp,
aes(x = X, y = Y)) +
geom_point(size=2)
rm(list = ls())
MyData <- mtcars
myfunc   <- function(my_df,colmn) {
if (lapply(my_df[colmn], is.numeric) == TRUE){
print(class(my_df[colmn]))
print(colmn)
DataTemp <- data.frame(my_df[colmn], my_df["mpg"])
names(DataTemp) <- c("X", "Y")
#Plotting a scatter plot
ggplot(data=DataTemp,
aes(x = X,
y = Y
)
) +
geom_point(size=2)
}
}
myfunc(my_df = MyData, colmn="gear")
rm(list = ls())
MyData <- mtcars
myfunc   <- function(my_df,colmn) {
if (lapply(my_df[colmn], is.numeric) == TRUE){
print(class(my_df[colmn]))
print(colmn)
DataTemp <- data.frame(my_df[colmn], my_df["mpg"])
names(DataTemp) <- c("X", "Y")
#Plotting a scatter plot
ggplot(data=DataTemp,
aes(x = X,
y = Y
)
) +
geom_point(size=2)
}
}
myfunc(my_df = MyData, colmn="gear")
library(tidyverse)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% spread(x, y)
df <- data.frame(row = rep(c(1, 51), each = 3),
var = c("Sepal.Length", "Species", "Species_num"),
value = c(5.1, "setosa", 1, 7.0, "versicolor", 2))
df
df %>% spread(var, value)
spred(df, "var", "value")
spred(df, key = "var", value = "value")
spread(df, key = "var", value = "value")
#ponderador_calibrado_viajes1
library(tidyverse)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as_tibble(Data)
MOD <- Data %>% filter(dia_habil1 =="S") %>%
mutate(zat_origen1 = as.numeric(zat_origen1),
zat_destino1 = as.numeric(zat_destino1)) %>%
group_by(zat_origen1,zat_destino1) %>%
summarise(Total = sum(ponderador_calibrado_viajes1,na.rm = TRUE))
names(MOD) <- c("ZatOrigin", "ZatDestination", "Value")
MOD <- MOD[complete.cases(MOD),]
library(sf)
Zats <- st_read("TAZ_Bogota/TAZ_Bogota_TEMP.shp")
#epsg = 4326
Zats2 <- st_transform(Zats, crs = 4326)
setwd("~/Dropbox/MyGitRepositories/DesireLinesBogOD2015/TAZ_Bogota")
setwd("~/Dropbox/MyGitRepositories/DesireLinesBogOD2015")
Zats <- st_read("TAZ_Bogota/TAZ_Bogota_TEMP.shp")
#epsg = 4326
Zats2 <- st_transform(Zats, crs = 4326)
setwd("~/Dropbox/MyGitRepositories/DesireLinesBogOD2015")
dim(MOD)
MOD <- MOD %>% filter(ZatOrigin %in% Zats2$Zona_Num_N)
dim(MOD)
MOD <- MOD %>% filter(ZatDestination %in% Zats2$Zona_Num_N)
dim(MOD)
write_delim(MOD, "DataReal.csv", delim = ",")
getwd()
