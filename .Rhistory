Lakeland <- read_excel("Documents/Yesica/Lakeland.xls")
library(readxl)
Lakeland <- read_excel("Lakeland.xls")
library(tidyverse)
mtcars
ggplot(data = mtcars) + geom_line(aes(x = drat, y =wt))
head(mtcars)
head(mtcars)
plot(cars)
head(mtcars)
plot(cars)
plot(cars)
library(here)
install.packages("here")
library(here)
normalize <- function(number) {
return ((number - min(number)) / (max(number) - min(number)))}
normalize(5)
normalize(c(1,2,3,4,5))
normalize(data$V1)
data <- data.frame(V1_norm = c(6,1,10,2), V2_norm = c(10,20,100,40))
normalize(data$V1)
normalize(data$V2)
objectSF <- nc
library(sf)
objectSF <- nc
my_df <- mtcars
my_df
lapply(my_df, is.numeric)
lapply(my_df["gear"], is.numeric)
myfunc   <- function(my_df,colmn) {
if (lapply(my_df[colmn], is.numeric) == TRUE){
print(class(my_df[colmn])) #Checking to see if I'm getting dataframe
print(colmn) #Check to see if I'm getting the right column
#Plotting a scatter plot
ggplot(data=my_df,
aes(x =my_df[colmn], #x-axis being the input colmn value via the function
y=my_df["mpg"] # a column that is already present in the my_df dataframe
)
) +
geom_point(size=2)
}
}
myfunc(my_df=a_df, colmn="gear")
myfunc(my_df=my_df, colmn="gear")
library(tidyverse)
my_df <- mtcars
myfunc   <- function(my_df,colmn) {
if (lapply(my_df[colmn], is.numeric) == TRUE){
print(class(my_df[colmn])) #Checking to see if I'm getting dataframe
print(colmn) #Check to see if I'm getting the right column
#Plotting a scatter plot
ggplot(data=my_df,
aes(x =my_df[colmn], #x-axis being the input colmn value via the function
y=my_df["mpg"] # a column that is already present in the my_df dataframe
)
) +
geom_point(size=2)
}
}
myfunc(my_df=my_df, colmn="gear")
MyData <- mtcars
ggplot(data=my_df,
aes(x =MyData["gear"], #x-axis being the input colmn value via the function
y=MyData["mpg"] # a column that is already present in the my_df dataframe
)
) +
geom_point(size=2)
ggplot(data=MyData,
aes(x =MyData["gear"], #x-axis being the input colmn value via the function
y=MyData["mpg"] # a column that is already present in the my_df dataframe
)
) +
geom_point(size=2)
ggplot(data=MyData,
aes(x =MyData["gear"], y = MyData["mpg"])) +
geom_point(size=2)
ggplot(data=MyData,
aes(x = MyData$gear, y = MyData$mpg)) +
geom_point(size=2)
MyData["gear"]
MyMata["mpg"]
MyData["mpg"]
ggplot(data=MyData,
aes(x = MyData["gear"], y = MyData["mpg"])) +
geom_point(size=2)
ggplot(data=MyData,
aes(x = "gear", y = "mpg")) +
geom_point(size=2)
X = MyData["gear"]
ggplot(data=MyData,
aes(x = x, y = Y)) +
geom_point(size=2)
X = MyData["gear"]
Y = MyData["mpg"]
ggplot(data=MyData,
aes(x = X, y = Y)) +
geom_point(size=2)
DataTemop <- data.frame(X = MyData["gear"], Y = MyData["mpg"])
ggplot(data=MyData,
aes(x = X, y = Y)) +
geom_point(size=2)
DataTemp <- data.frame(X = MyData["gear"], Y = MyData["mpg"])
DataTemp
ggplot(data=DataTemp,
aes(x = X, y = Y)) +
geom_point(size=2)
MyData <- mtcars
DataTemp <- data.frame(X = MyData["gear"], Y = MyData["mpg"])
DataTemp
class(DataTemp)
names(DataTemp)
DataTemp <- data.frame(MyData["gear"], MyData["mpg"])
names(DataTemp) <- c("X", "Y")
DataTemp <- data.frame(MyData["gear"], MyData["mpg"])
names(DataTemp) <- c("X", "Y")
ggplot(data = DataTemp,
aes(x = X, y = Y)) +
geom_point(size=2)
rm(list = ls())
MyData <- mtcars
myfunc   <- function(my_df,colmn) {
if (lapply(my_df[colmn], is.numeric) == TRUE){
print(class(my_df[colmn]))
print(colmn)
DataTemp <- data.frame(my_df[colmn], my_df["mpg"])
names(DataTemp) <- c("X", "Y")
#Plotting a scatter plot
ggplot(data=DataTemp,
aes(x = X,
y = Y
)
) +
geom_point(size=2)
}
}
myfunc(my_df = MyData, colmn="gear")
rm(list = ls())
MyData <- mtcars
myfunc   <- function(my_df,colmn) {
if (lapply(my_df[colmn], is.numeric) == TRUE){
print(class(my_df[colmn]))
print(colmn)
DataTemp <- data.frame(my_df[colmn], my_df["mpg"])
names(DataTemp) <- c("X", "Y")
#Plotting a scatter plot
ggplot(data=DataTemp,
aes(x = X,
y = Y
)
) +
geom_point(size=2)
}
}
myfunc(my_df = MyData, colmn="gear")
library(tidyverse)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% spread(x, y)
df <- data.frame(row = rep(c(1, 51), each = 3),
var = c("Sepal.Length", "Species", "Species_num"),
value = c(5.1, "setosa", 1, 7.0, "versicolor", 2))
df
df %>% spread(var, value)
spred(df, "var", "value")
spred(df, key = "var", value = "value")
spread(df, key = "var", value = "value")
library(tidyverse)
library(shiny)
ui <- fluidPage(
# Application title
titlePanel("Analyze Iris table"),
# Sidebar with a dropdown menu selection input for key meausre compoenent
sidebarLayout(
sidebarPanel(
selectInput("yInput", "Measuring element: ",
colnames(iris), selected = colnames(iris)[2]),
selectInput('xInput', 'Grouper: ',
colnames(iris), selected = colnames(iris)[5])
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("barPlot")
)
)
)
server <- function(input, output) {
by_xInput <- reactive({
iris %>%
group_by(input$xInput) %>%
summarize(n = length(input$xInput), mean_y = mean(input$yInput))
})
output$barPlot <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = by_xInput(), aes(x = input$xInput, y = mean_y)) +
geom_bar(stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Analyze Iris table"),
# Sidebar with a dropdown menu selection input for key meausre compoenent
sidebarLayout(
sidebarPanel(
selectInput("yInput", "Measuring element: ",
colnames(iris), selected = colnames(iris)[2]),
selectInput('xInput', 'Grouper: ',
colnames(iris), selected = colnames(iris)[5])
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("barPlot")
)
)
)
server <- function(input, output) {
by_xInput <- reactive({
print(input$xInput)
print(input$yInput)
iris %>%
group_by(input$xInput) %>%
summarize(n = length(input$xInput), mean_y = mean(input$yInput))
})
output$barPlot <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = by_xInput(), aes(x = input$xInput, y = mean_y)) +
geom_bar(stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
colnames(iris)
iris
iris %>%
group_by(Sepal.Length) %>%
summarize(n = length(Sepal.Length), mean_y = mean(Sepal.Width))
server <- function(input, output) {
by_xInput <- reactive({
print(input$xInput)
print(input$yInput)
iris %>%
group_by(input$xInput) %>%
summarize(n = length(input$xInput), mean_y = mean(input$yInput))
})
print(by_xInput())
output$barPlot <- renderPlot({
# generate bins based on input$bins from ui.R
ggplot(data = by_xInput(), aes(x = input$xInput, y = mean_y)) +
geom_bar(stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
by_xInput <- reactive({
print(input$xInput)
print(input$yInput)
iris %>%
group_by(input$xInput) %>%
summarize(n = length(input$xInput), mean_y = mean(input$yInput))
})
output$barPlot <- renderPlot({
print(by_xInput())
# generate bins based on input$bins from ui.R
ggplot(data = by_xInput(), aes(x = input$xInput, y = mean_y)) +
geom_bar(stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
by_xInput <- reactive({
print(input$xInput)
print(input$yInput)
Temp <- iris %>%
group_by(input$xInput) %>%
summarize(n = length(input$xInput), mean_y = mean(input$yInput))
return(Temp)
})
output$barPlot <- renderPlot({
print(names(by_xInput()))
print(by_xInput())
# generate bins based on input$bins from ui.R
ggplot(data = by_xInput(), aes(x = input$xInput, y = mean_y)) +
geom_bar(stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
by_xInput <- reactive({
print(input$xInput)
print(input$yInput)
Temp <- iris %>%
group_by(input$xInput) %>%
summarize(n = length(input$xInput), mean_y = mean(input$yInput))
names(Temp)[1] <- "YourVariable"
return(Temp)
})
output$barPlot <- renderPlot({
print(names(by_xInput()))
print(by_xInput())
# generate bins based on input$bins from ui.R
ggplot(data = by_xInput(), aes(x = input$xInput, y = mean_y)) +
geom_bar(stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
by_xInput <- reactive({
Temp <- iris %>%
group_by(input$xInput) %>%
summarize(n = length(input$xInput), mean_y = mean(input$yInput))
names(Temp)[1] <- "YourVariable"
return(Temp)
})
output$barPlot <- renderPlot({
print(names(by_xInput()))
print(by_xInput())
# generate bins based on input$bins from ui.R
ggplot(data = by_xInput(), aes(x = input$xInput, y = mean_y)) +
geom_bar(stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
by_xInput <- reactive({
Temp <- iris %>%
group_by(input$xInput) %>%
summarize(n = length(input$xInput), mean_y = mean(input$yInput))
names(Temp)[1] <- "YourVariable"
return(Temp)
})
output$barPlot <- renderPlot({
print(names(by_xInput()))
print(by_xInput())
# generate bins based on input$bins from ui.R
ggplot(data = by_xInput(), aes(x = YourVariable, y = mean_y)) +
geom_bar(stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
names(iris)
Data <- irid
Data <- iris
iris
str_replace(names(Data),".","")
names(Data)
?substring
gsub(names(Data),".","")
Data <- iris
names(Data)
gsub(names(Data),".","")
t <- names(iris)
t
apply(t, print(t))
Data <- iris
Names <- names(Data)
for (i in 1:length(Names)){
Names[i] <- gsub(Names[i],".","")
}
Names
?gsub
Data <- iris
Names <- names(Data)
for (i in 1:length(Names)){
Names[i] <- gsub(".","",Names[i])
}
Names
Data <- iris
Names <- names(Data)
for (i in 1:length(Names)){
Names[i] <- grep(".","",Names[i])
}
Data <- data.fame(
Alue = Helsinki,
SDP = 13.5
)
Data <- data.frame(
Alue = Helsinki,
SDP = 13.5
)
Data <- data.frame(
Alue = "Helsinki",
SDP = 13.5
)
Data
Data <- data.frame(
Alue = "Helsinki",
SDP = 13.5,
PS = 12.3,
KOK = 21.8
)
Data
install.packages("tidyr")
library(tidyr)
?pivto_longer
?pivot_longer
Datalong <- pivot_longer(Data, cols = c("SDP","PS","KOK"), names_to = "name", )
Datalong
ggplot(data = Datalong) + geom_col(aes(x = name, y = value))
library(ggplot2)
ggplot(data = Datalong) + geom_col(aes(x = name, y = value))
Datalong <- pivot_longer(Data, cols = c("SDP","PS","KOK"), names_to = "name")
ggplot(data = Datalong) + geom_col(aes(x = name, y = value))
Datalong <- pivot_longer(Data, cols = c("SDP","PS","KOK"), names_to = "name")
ggplot(data = Datalong) + geom_col(aes(x = name, y = value))
Datalong
library(tidyverse)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as_tibble(Data)
Data %>% names()
summary(as.factor(Data$motivoviaje1))
summary(as.factor(Data$medio_predominante1))
ls()
MOD <- Data %>% filter(dia_habil1 =="S") %>%
mutate(zat_origen1 = as.numeric(zat_origen1),
zat_destino1 = as.numeric(zat_destino1)) %>%
group_by(zat_origen1,zat_destino1, medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado_viajes1,na.rm = TRUE))
View(MOD)
?pivot_wider
MOD %>% names()
MOD2 <- MOD %>% pivot_wider(id_cols = c("zat_origen1","zat_destino1"),
names_from = medio_predominante1,
values_from = Total)
View(MOD2)
?replace_na
MOD <- Data %>% filter(dia_habil1 =="S") %>%
mutate(zat_origen1 = as.numeric(zat_origen1),
zat_destino1 = as.numeric(zat_destino1)) %>%
group_by(zat_origen1,zat_destino1, medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado_viajes1,na.rm = TRUE))
MOD <- MOD %>% pivot_wider(id_cols = c("zat_origen1","zat_destino1"),
names_from = medio_predominante1,
values_from = Total) %>%
replace(is.na(.),0)
View(MOD2)
View(MOD)
names(MOD)
names(MOD)[c(1,2)] <- c("ZatOrigin","ZatDestination")
names(MOD)[7] <- "Bicicleta"
names(MOD)
MOD <- MOD[complete.cases(MOD),]
MOD$Value <- 0
View(MOD)
rm(list = ls())
ls()
library(tidyverse)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as_tibble(Data)
MOD <- Data %>% filter(dia_habil1 =="S") %>%
mutate(zat_origen1 = as.numeric(zat_origen1),
zat_destino1 = as.numeric(zat_destino1)) %>%
group_by(zat_origen1,zat_destino1, medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado_viajes1,na.rm = TRUE))
MOD <- MOD %>% pivot_wider(id_cols = c("zat_origen1","zat_destino1"),
names_from = medio_predominante1,
values_from = Total) %>%
replace(is.na(.),0)
names(MOD)
names(MOD)[c(1,2)] <- c("ZatOrigin","ZatDestination")
names(MOD)[7] <- "Bicicleta"
MOD <- MOD[complete.cases(MOD),]
names(MOD)
MOD$Value <- 0
View(MOD)
library(sf)
setwd("~/Dropbox/MyGitRepositories/DesireLinesBogOD2015")
Zats <- st_read("TAZ_Bogota/TAZ_Bogota_TEMP.shp")
#epsg = 4326
Zats2 <- st_transform(Zats, crs = 4326)
Zats <- st_read("TAZ_Bogota/TAZ_Bogota_TEMP.shp")
#epsg = 4326
Zats2 <- st_transform(Zats, crs = 4326)
setwd("~/Dropbox/MyGitRepositories/DesireLinesBogOD2015")
MOD <- MOD %>% filter(ZatOrigin %in% Zats2$Zona_Num_N)
MOD <- MOD %>% filter(ZatDestination %in% Zats2$Zona_Num_N)
write_delim(MOD, "DataReal.csv", delim = ",")
names(MOD)
names(MOD)
names(MOD)[4] <- "TPCySITP"
names(MOD)
rm(list = ls())
#ponderador_calibrado_viajes1
library(tidyverse)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/OriginalData")
Data <- readstata13::read.dta13("Viajes-Personas.dta")
Data <- as_tibble(Data)
MOD <- Data %>% filter(dia_habil1 =="S") %>%
mutate(zat_origen1 = as.numeric(zat_origen1),
zat_destino1 = as.numeric(zat_destino1)) %>%
group_by(zat_origen1,zat_destino1, medio_predominante1) %>%
summarise(Total = sum(ponderador_calibrado_viajes1,na.rm = TRUE))
MOD <- MOD %>% pivot_wider(id_cols = c("zat_origen1","zat_destino1"),
names_from = medio_predominante1,
values_from = Total) %>%
replace(is.na(.),0)
names(MOD)
names(MOD)[c(1,2)] <- c("ZatOrigin","ZatDestination")
names(MOD)[7] <- "Bicicleta"
names(MOD)[4] <- "TPCySITP"
MOD <- MOD[complete.cases(MOD),]
MOD$Value <- 0
library(sf)
setwd("~/Dropbox/MyGitRepositories/DesireLinesBogOD2015")
Zats <- st_read("TAZ_Bogota/TAZ_Bogota_TEMP.shp")
#epsg = 4326
Zats2 <- st_transform(Zats, crs = 4326)
setwd("~/Dropbox/MyGitRepositories/DesireLinesBogOD2015")
MOD <- MOD %>% filter(ZatOrigin %in% Zats2$Zona_Num_N)
MOD <- MOD %>% filter(ZatDestination %in% Zats2$Zona_Num_N)
write_delim(MOD, "DataReal.csv", delim = ",")
